{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"deferia.cr","text":"<p>De Feria es un proyecto de trabajo comunal universitario de la Universidad de Costa Rica, desarrollado por TC-691 \"Tropicalizaci\u00f3n de la tecnolog\u00eda\" de la Escuela de Ingenier\u00eda El\u00e9ctrica, con la direcci\u00f3n del profesor Fabi\u00e1n Abarca Calder\u00f3n.</p> <p></p> <p>De Feria tiene el apoyo t\u00e9cnico y log\u00edstico de FAO Costa Rica.</p> <p></p>"},{"location":"api/","title":"De Feria API","text":""},{"location":"api/#funcionamiento","title":"Funcionamiento","text":""},{"location":"api/#workflow","title":"Workflow","text":"<p>Como se est\u00e1 utilizando Django Rest Framework, se va a seguir la estructura de la API que se describe en la documentaci\u00f3n de DRF. Todo empieza en el modelo de la aplicaci\u00f3n, que se va a definir en el archivo <code>models.py</code>. Luego, se va a crear un serializador en el archivo <code>serializers.py</code> que va a convertir los objetos de la base de datos en JSON. En este serializador se pueden escoger y dar formato a los datos que se quieren mostrar, por ejemplo, omitir algunos campos del modelo o empotrar datos de un modelo dentro del serializador de otro. Por \u00faltimo, se va a crear una vista en el archivo <code>views.py</code> que va a definir c\u00f3mo se va a ver la informaci\u00f3n en la API. Estas vistas se implementan mediante viewsets, que son clases que definen c\u00f3mo se van a ver los datos en la API. Por \u00faltimo, se va a definir la URL de la API en el archivo <code>urls.py</code> de la aplicaci\u00f3n.</p>"},{"location":"api/#documentacion-de-la-api","title":"Documentaci\u00f3n de la API","text":"<p>La documentaci\u00f3n de la API se va a generar autom\u00e1ticamente con la librer\u00eda <code>spectacular</code> y <code>redoc</code>. La librer\u00eda <code>spectacular</code> va a generar la documentaci\u00f3n de la API en formato JSON y <code>redoc</code> va a mostrar la documentaci\u00f3n en un formato m\u00e1s amigable. Para que esto suceda, <code>spectacular</code> debe generar un esquema de la API y <code>redoc</code> debe leer este esquema y mostrarlo en la URL <code>/api/docs/</code>. La informaci\u00f3n autogenerada por <code>spectacular</code> se puede modificar en el archivo <code>settings.py</code> en la secci\u00f3n <code>SPECTACULAR_SETTINGS</code>, o bien, (de forma m\u00e1s segura) utilizando la librer\u00eda <code>extend_schema</code>, para a\u00f1adir descripciones y mejorar la legibilidad de los m\u00e9todos b\u00e1sicos de la API (list, create, retrieve, update, partial update, delete).</p>"},{"location":"api/#actualizacion-y-generacion-de-la-documentacion","title":"Actualizaci\u00f3n y generaci\u00f3n de la documentaci\u00f3n","text":"<p>Existen limitaciones en la generaci\u00f3n de la documentaci\u00f3n de la API. Por ejemplo, no se pueden a\u00f1adir t\u00edtulos para la API o descripciones y licencias de la misma. Para solucionar esto, se ha decidio utilizar un documento .yaml que va a contener informaci\u00f3n est\u00e1tica sobre la API. Este documento se va a utilizar para generar el esquema definitivo que utilizar\u00e1 Redoc para mostrar la documentaci\u00f3n. </p> <p>Para actualizar la documentaci\u00f3n autogenerada, se debe correr este comando:</p> <pre><code>python manage.py spectacular --color --file api/schema.yml\n</code></pre> <p>Esto escribe el esquema autogenerado por <code>spectacular</code> en el archivo <code>api/schema.yml</code>. Luego, se debe ejecutar el comando:</p> <pre><code>python api/comb_schema_script.py\n</code></pre> <p>Este script combina el esquema autogenerado por <code>spectacular</code> con el esquema est\u00e1tico que se encuentra en el archivo <code>api/schema_static.yml</code>. Este archivo contiene informaci\u00f3n sobre la API que no se puede autogenerar, como t\u00edtulos, descripciones y licencias. El script combina estos dos archivos y escribe el esquema definitivo en el archivo <code>api/schema.yml</code>. Por \u00faltimo, se debe correr el servidor y acceder a la URL <code>/api/docs/</code> para ver la documentaci\u00f3n de la API.</p>"},{"location":"api/#ferias","title":"Ferias","text":"<p>Esta API va a permitir a los usuarios ver y (en caso de tener los permisos) modificar la informaci\u00f3n sobre las ferias. El formato esperado de esta API es el siguiente:</p> <pre><code>{\n    \"url\": \"http://127.0.0.1:8000/datos/api/ferias/alajuela/\",\n    \"name\": \"Alajuela\",\n    \"opening_hours\": \"Fr 12:00-20:00; Sa 06:00-13:00\",\n    \"location\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            -84.2190568571068,\n            10.013534238571\n        ]\n    },\n    \"size\": \"XL\",\n    \"province\": \"Alajuela\",\n    \"canton\": \"Alajuela\",\n    \"district\": \"Alajuela\",\n    \"postal_code\": 20101,\n    \"address\": \"en Plaza Ferias. De la bomba Santa Anita, 200 m al oeste. Del PriceSmart de Alajuela, 250 m al este. Por Ekono\",\n    \"phone\": 24432010,\n    \"email\": \"pferias@plazaferias.com\",\n    \"website\": null,\n    \"facebook\": \"https://www.facebook.com/people/Plaza-Ferias-Alajuela/100064584170065/\",\n    \"instagram\": null,\n    \"opening_date\": null,\n    \"operator\": \"Plaza Ferias\",\n    \"branch\": null,\n    \"type\": \"mercado\",\n    \"parking\": \"surface\",\n    \"bicycle_parking\": true,\n    \"fairground\": true,\n    \"indoor\": true,\n    \"toilets\": true,\n    \"handwashing\": true,\n    \"drinking_water\": true,\n    \"food\": true,\n    \"drinks\": true,\n    \"handicrafts\": true,\n    \"butcher\": true,\n    \"dairy\": true,\n    \"seafood\": true,\n    \"spices\": null,\n    \"garden_centre\": true,\n    \"florist\": true,\n    \"other_services\": null\n}\n</code></pre> <p>Todos los atributos pueden estar en blanco o ser nulos excepto <code>url</code> (llave primaria), <code>name</code>, <code>province</code>, <code>canton</code> y <code>district</code>.</p>"},{"location":"api/#geoferias","title":"GeoFerias","text":"<p>Este API trata con los datos relativos a las ubicaciones de las ferias. Su objetivo es retornar un archivo geojson en lugar de un json normal. Esto porque el geojson se utiliza para tratar con datos geom\u00e9tricos y en este caso, geogr\u00e1ficos. El formato esperado de esta API es el siguiente:</p> <pre><code>{\n    \"type\": \"Feature\",\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            -84.2190568571068,\n            10.013534238571\n        ]\n    },\n    \"properties\": {\n        \"name\": \"Alajuela\",\n        \"province\": \"Alajuela\",\n        \"canton\": \"Alajuela\",\n        \"district\": \"Alajuela\",\n        \"postal_code\": 20101,\n        \"address\": \"en Plaza Ferias. De la bomba Santa Anita, 200 m al oeste. Del PriceSmart de Alajuela, 250 m al este. Por Ekono\"\n    }\n}\n</code></pre> <p>Tiene los mismos atributos no nulos que la API de ferias, pero en este caso, se a\u00f1ade un atributo <code>geometry</code> que contiene la informaci\u00f3n de la ubicaci\u00f3n de la feria. Este es el atributo <code>location</code> en el modelo original y puede ser nulo, por lo que se debe tener esto en cuenta y manejar el caso en el futuro.</p>"},{"location":"api/#productos","title":"Productos","text":"<p>Este API trata con los diferentes tipos de productos que se pueden encontrar en las diferentes ferias a lo largo del pa\u00eds. Cada producto tiene asociado una variedad, dicha variedad puede tener nombre cient\u00edfico, nombre com\u00fan, disponibilidad por temporada, entre otros. El formato esperado de esta API es el siguiente:</p> <pre><code>{\n    \"product_url\": \"acelga\",\n    \"category\": \"verdura\",\n    \"common_name\": \"acelga\",\n    \"common_name_alternate\": null,\n    \"description\": \"La acelga, al igual que la espinaca, brilla en ensaladas, pues aporta frescura y un inmenso valor nutricional. Reconocida por su alto aporte en minerales y vitaminas esenciales, es la adici\u00f3n perfecta para una dieta equilibrada.\",\n    \"name_origin\": null,\n    \"center_origin\": [\n        \"VI\"\n    ],\n    \"center_origin_notes\": \"La cocina et\u00edope, rica en opciones vegetarianas, ha visto nacer a la acelga en sus tierras y ha sido la primera en acogerla como un ingrediente esencial en sus deliciosas recetas verdes.\",\n    \"food_basket\": false,\n    \"nutrition_notes\": \"La acelga, rica en vitaminas A, C y K y minerales esenciales para el buen funcionamiento del organismo, como magnesio, hierro y potasio, tambi\u00e9n ayuda a regular los procesos digestivos. Su elevado contenido de vitamina K ayuda a mantener sanos los huesos y la sangre.\",\n    \"preparation\": [],\n    \"preparation_notes\": null,\n    \"storage\": [],\n    \"storage_notes\": \"En un recipiente cerrado con poca humedad\",\n    \"varieties\": [\n        {\n            \"common_name_variety\": null,\n            \"scientific_name\": \"Beta vulgaris\",\n            \"scientific_name_variety\": \"cicla\",\n            \"common_name_variety_alternate\": null,\n            \"jan\": 3,\n            \"feb\": 3,\n            \"mar\": 3,\n            \"apr\": 2,\n            \"may\": 2,\n            \"jun\": 2,\n            \"jul\": 2,\n            \"aug\": 1,\n            \"sep\": 1,\n            \"oct\": 2,\n            \"nov\": 2,\n            \"dec\": 2\n        }\n    ]\n}\n</code></pre> <p>En este caso, los atribbutos que no pueden ser nullos son product_url, category, common name y variety_id, en el caso del modelo de variedades.</p>"},{"location":"api/#precios","title":"Precios","text":"<pre><code>{\n    \"product\" = \"aguacate Hass\"\n    \"prices-history\" = [\n\n    ]\n}\n</code></pre>"},{"location":"identidad/","title":"Dise\u00f1o de la identidad visual","text":""},{"location":"identidad/#nombre","title":"Nombre","text":"<p>\"De feria\" es una alusi\u00f3n a frases comunes, como:</p> <ul> <li>\"\u00a1Vamos de feria!\"</li> <li>\"Frescura, variedad y precios de feria\"</li> <li>\"De feria\": de gratis, extra</li> <li>\"Tras de feria\": adicionalmente, para rematar, tras de todo</li> </ul> <p>Los nombres utilizados en el proyecto son:</p> <ul> <li>de feria / deferia / De Feria / DeFeria </li> <li>deferia.cr (URL del sitio web)</li> </ul>"},{"location":"identidad/#logo","title":"Logo","text":"<p>Variedades de color</p> <p> </p>"},{"location":"identidad/#tipografia","title":"Tipograf\u00eda","text":"<p>La identidad visual, incluyendo el sitio web, utiliza dos fuentes tipogr\u00e1ficas:</p> <ul> <li>Nunito Sans (disponible en Google Fonts): sans serif (palo seco) para textos y el logo.</li> <li>Petrona (disponible en Google Fonts): serifa para t\u00edtulos.</li> </ul>"},{"location":"identidad/#paleta-de-colores","title":"Paleta de colores","text":"<p>Paleta seleccionada para reflejar la riqueza visual de las ferias, con colores en tonos tierra pero con altos contrastes.</p> Nombre HEX RGB Muestra Amarillo EBB615 235, 181, 21 Verde 008D4A 0, 141, 74 Azul 3879B5 56, 121, 182 Gris D1C5BA 209, 197, 186 Rojo E64128 230, 65, 40 Caf\u00e9 CD7535 205, 117, 53 Rosado F29196 242, 145, 150 Negro 000000 0, 0, 0"},{"location":"identidad/#elementos-graficos","title":"Elementos gr\u00e1ficos","text":"<p>Para complementar la identidad visual, fueron dise\u00f1ados una inmensa cantidad de \u00edconos para representar los productos de la feria en nuestra base de datos.</p> <p> </p>"},{"location":"sobre/","title":"Qui\u00e9nes somos","text":"<p>Participaron en el dise\u00f1o de la identidad visual:</p> <ul> <li>Gabriel Alejandro Quir\u00f3s Villalobos, Direcci\u00f3n de Empresas (dise\u00f1o del logo)</li> <li>Katherine Priscilla Mora Cruz, Dise\u00f1o Gr\u00e1fico (paleta de colores, investigaci\u00f3n y primera versi\u00f3n del manual de identidad)</li> <li>Alexandra Alfaro Rodr\u00edguez, Dise\u00f1o Gr\u00e1fico (elementos de la identidad visual)</li> <li>Fabi\u00e1n Abarca Calder\u00f3n, Ingenier\u00eda El\u00e9ctrica (supervisi\u00f3n, dise\u00f1o de la p\u00e1gina web)</li> </ul>"}]}